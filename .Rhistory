---
title: 'Reproducible Research: Peer Assessment 1'
output:
md_document: default
html_document md_document: default
---
## Introduction
knitr::opts_chunk$set(echo = TRUE)
---
title: 'Reproducible Research: Peer Assessment 1'
output:
md_document: default
html_document md_document: default
---
## Introduction
#knitr::opts_chunk$set(echo = TRUE)
---
title: 'Reproducible Research: Peer Assessment 1'
---
title: 'Reproducible Research: Peer Assessment 1'
#Reading Data file:
ProjectData<-read.csv("activity.csv", sep=",", header=TRUE, stringsAsFactors=TRUE)
summary(ProjectData)
DayStepsMean<- aggregate(steps~date,ProjectData, mean, na.rm=TRUE)
summary(DayStepsMean)
mean(DayStepsMean$steps)
##Steps taking per day:
DaySteps<- aggregate(steps~date,ProjectData, na.rm=T, sum)
head(DaySteps,3)
summary(DaySteps)
hist(DaySteps$steps, main = "Steps per day (NA's removed) ", xlab = "Steps per day", ylab = "Frequency", ylim=c(0,30), col = "magenta")
#dev.off()
#ping("chunk5")
#hist(DaySteps$steps, main = "Steps per day (NA's removed) ", xlab = "Steps per day", ylab = "Frequency", col = "magenta")
#dev.off()
TotalDayStepsMean<-mean(DaySteps$steps,na.rm=TRUE)
TotalDayStepsMean
TotalDayStepsMedian<-median(DaySteps$steps)
TotalDayStepsMedian
library(ggplot2)
DaylyActivity<- aggregate(steps~interval , ProjectData, mean)
p<- ggplot(DaylyActivity, aes(interval,steps,color=steps))+ ggtitle("Dayly Activity")
p + geom_line(size=.5)+labs(x = "5-minute interval")+labs(y = "Average number of steps taken in 5-minute intervals" ) +theme(axis.text=element_text(color="black",size=13))+theme(panel.background=element_rect(fill="khaki"))+theme(axis.title.x=element_text(color='blue',vjust=1.5),axis.title.y=element_text(color="blue",vjust=1.5), plot.title=element_text(color="blue",size=15,vjust=1),
plot.background=element_rect(fill="lightblue"))
# plot(plotname)
maxStepsIndex <- which(DaylyActivity$steps == max(DaylyActivity$steps))
maxNumberStepsInterval <-DaylyActivity$interval[maxStepsIndex]
maxNumberStepsInterval
summary(is.na(ProjectData))
library(missForest)
library(Hmisc)
#Load Data
#ProjectData
#seed 10% missing values
set.seed(81)
ProjectData.mis<-prodNA(ProjectData, noNA =0.1)
#impute steps with predictive mean matching values:
ProjectData.mis$imputedSteps<- with(ProjectData.mis, impute(steps, mean))
#after Imputing "steps" NA's with Hmisc(imputing with mean option):
summary(is.na(ProjectData.mis))
ProjectData$steps<-ProjectData.mis$imputedSteps
#Which resulted in no NA's in the modified DataFrame ProjectData:
summary(is.na(ProjectData))
ProjectDataImputed<-ProjectData
#Calculating steps taking per day with steps imputed by mean:
DayStepsImputed<- aggregate(steps~date, ProjectDataImputed, sum)
hist(DayStepsImputed$steps, main = "Total number of steps taken each day (with steps NAs inputed)", xlab = "Steps per day", ylab = "Frequency",  xlim=c(0,25000),ylim=c(0,35), col = "magenta")
par(mfrow=c(2,1))
hist(DaySteps$steps, main ="Total number of steps taken each day (NA's removed)" , xlab = "Steps per day", ylab = "Frequency", ylim=c(0,30), col = "magenta")
hist(DayStepsImputed$steps, main ="Total number of steps taken each day (NAs imputed)", xlab = "Steps per day", ylab = "Frequency", xlim=c(0,25000), ylim=c(0,35), col = "magenta")
summary(DayStepsImputed$steps)
TotalDayStepsImputedMean<-mean(DayStepsImputed$steps)
TotalDayStepsImputedMean
TotalDayStepsImputedMedian<-median(DayStepsImputed$steps)
TotalDayStepsImputedMedian
library(ggplot2)
DaylyActivityImputed<- aggregate(steps~interval,ProjectDataImputed, mean)
p<- ggplot(DaylyActivity, aes(  interval, steps,color=steps))+ ggtitle("Dayly Activity (with steps NA's imputed)")
p + geom_line(size=.5)+labs(x = "5-minute interval")+labs(y = "Average number of steps taken" ) +theme(axis.text=element_text(color="black",size=13))+theme(panel.background=element_rect(fill="khaki"))+theme(axis.title.x=element_text(color='blue',vjust=1.5),axis.title.y=element_text(color="blue",vjust=1.5), plot.title=element_text(color="blue",size=15,vjust=1),
plot.background=element_rect(fill="lightblue"))
#Converting date variable to Date format
library(anytime)
ProjectDataImputed$date<-anydate(ProjectDataImputed$date)
head(ProjectDataImputed,3)
class(ProjectDataImputed$date)
#creating weekdays column
ProjectDataImputed$weekdays<-weekdays(ProjectDataImputed$date, abbreviate = FALSE)
head(ProjectDataImputed,3)
#Create a new factor variable in the dataset with two levels - "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
#1 duplicating wekdays column as dayofweek column (for check later conversion to "Weekdays" and "Weekends")
library(dplyr)
ProjectDataImputed<-mutate(ProjectDataImputed, dayofweek=weekdays)
head(ProjectDataImputed,3)
#converting names of weekdays to "Weekday" or "Weekend"
ProjectDataFinalImputed<-ProjectDataImputed%>%mutate(weekdays = case_when(
weekdays == 'Sunday' ~ 'Weekend',
weekdays == 'Saturday' ~ 'Weekend',
TRUE ~ 'Weekday'))
#Check conversion to Weekdays :
head(ProjectDataFinalImputed,3)
DaylyActivityWeekdaysImputedFinal<- aggregate(steps~interval+weekdays, ProjectDataFinalImputed, mean)
head(DaylyActivityWeekdaysImputedFinal,3)
tail(DaylyActivityWeekdaysImputedFinal,3)
g<-ggplot(DaylyActivityWeekdaysImputedFinal, aes(interval, steps, color=weekdays))+ ggtitle("Comparing Weekdays and Weekends activities")
g + geom_line(size=.6)+ labs(x = "Time interval")+labs(y = "Avarage number of steps taken") +theme(axis.text=element_text(color="black",size=13))+theme(axis.title.x=element_text(color='blue',vjust=1.5), axis.title.y=element_text(color="blue",vjust=1.5))
#plot(plotname)
library(lattice)
with(DaylyActivityWeekdaysImputedFinal, xyplot(steps ~ interval | weekdays, type="l", xlab = "Time interval", ylab = "Avarage number of steps taken", layout = c(1, 2)))
#Reading Data file:
ProjectData<-read.csv("activity.csv", sep=",", header=TRUE, stringsAsFactors=TRUE)
summary(ProjectData)
DayStepsMean<- aggregate(steps~date,ProjectData, mean, na.rm=TRUE)
summary(DayStepsMean)
mean(DayStepsMean$steps)
##Steps taking per day:
DaySteps<- aggregate(steps~date,ProjectData, na.rm=T, sum)
head(DaySteps,3)
summary(DaySteps)
hist(DaySteps$steps, main = "Steps per day (NA's removed) ", xlab = "Steps per day", ylab = "Frequency", ylim=c(0,30), col = "magenta")
#dev.off()
#ping("chunk5")
#hist(DaySteps$steps, main = "Steps per day (NA's removed) ", xlab = "Steps per day", ylab = "Frequency", col = "magenta")
#dev.off()
TotalDayStepsMean<-mean(DaySteps$steps,na.rm=TRUE)
TotalDayStepsMean
TotalDayStepsMedian<-median(DaySteps$steps)
TotalDayStepsMedian
library(ggplot2)
DaylyActivity<- aggregate(steps~interval , ProjectData, mean)
p<- ggplot(DaylyActivity, aes(interval,steps,color=steps))+ ggtitle("Dayly Activity")
p + geom_line(size=.5)+labs(x = "5-minute interval")+labs(y = "Average number of steps taken in 5-minute intervals" ) +theme(axis.text=element_text(color="black",size=13))+theme(panel.background=element_rect(fill="khaki"))+theme(axis.title.x=element_text(color='blue',vjust=1.5),axis.title.y=element_text(color="blue",vjust=1.5), plot.title=element_text(color="blue",size=15,vjust=1),
plot.background=element_rect(fill="lightblue"))
# plot(plotname)
maxStepsIndex <- which(DaylyActivity$steps == max(DaylyActivity$steps))
maxNumberStepsInterval <-DaylyActivity$interval[maxStepsIndex]
maxNumberStepsInterval
summary(is.na(ProjectData))
library(missForest)
library(Hmisc)
#Load Data
#ProjectData
#seed 10% missing values
set.seed(81)
ProjectData.mis<-prodNA(ProjectData, noNA =0.1)
#impute steps with predictive mean matching values:
ProjectData.mis$imputedSteps<- with(ProjectData.mis, impute(steps, mean))
#after Imputing "steps" NA's with Hmisc(imputing with mean option):
summary(is.na(ProjectData.mis))
ProjectData$steps<-ProjectData.mis$imputedSteps
#Which resulted in no NA's in the modified DataFrame ProjectData:
summary(is.na(ProjectData))
ProjectDataImputed<-ProjectData
#Calculating steps taking per day with steps imputed by mean:
DayStepsImputed<- aggregate(steps~date, ProjectDataImputed, sum)
hist(DayStepsImputed$steps, main = "Total number of steps taken each day (with steps NAs inputed)", xlab = "Steps per day", ylab = "Frequency",  xlim=c(0,25000),ylim=c(0,35), col = "magenta")
par(mfrow=c(2,1))
hist(DaySteps$steps, main ="Total number of steps taken each day (NA's removed)" , xlab = "Steps per day", ylab = "Frequency", ylim=c(0,30), col = "magenta")
hist(DayStepsImputed$steps, main ="Total number of steps taken each day (NAs imputed)", xlab = "Steps per day", ylab = "Frequency", xlim=c(0,25000), ylim=c(0,35), col = "magenta")
summary(DayStepsImputed$steps)
TotalDayStepsImputedMean<-mean(DayStepsImputed$steps)
TotalDayStepsImputedMean
TotalDayStepsImputedMedian<-median(DayStepsImputed$steps)
TotalDayStepsImputedMedian
library(ggplot2)
DaylyActivityImputed<- aggregate(steps~interval,ProjectDataImputed, mean)
p<- ggplot(DaylyActivity, aes(  interval, steps,color=steps))+ ggtitle("Dayly Activity (with steps NA's imputed)")
p + geom_line(size=.5)+labs(x = "5-minute interval")+labs(y = "Average number of steps taken" ) +theme(axis.text=element_text(color="black",size=13))+theme(panel.background=element_rect(fill="khaki"))+theme(axis.title.x=element_text(color='blue',vjust=1.5),axis.title.y=element_text(color="blue",vjust=1.5), plot.title=element_text(color="blue",size=15,vjust=1),
plot.background=element_rect(fill="lightblue"))
#Converting date variable to Date format
library(anytime)
ProjectDataImputed$date<-anydate(ProjectDataImputed$date)
head(ProjectDataImputed,3)
class(ProjectDataImputed$date)
#creating weekdays column
ProjectDataImputed$weekdays<-weekdays(ProjectDataImputed$date, abbreviate = FALSE)
head(ProjectDataImputed,3)
#Create a new factor variable in the dataset with two levels - "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
#1 duplicating wekdays column as dayofweek column (for check later conversion to "Weekdays" and "Weekends")
library(dplyr)
ProjectDataImputed<-mutate(ProjectDataImputed, dayofweek=weekdays)
head(ProjectDataImputed,3)
#converting names of weekdays to "Weekday" or "Weekend"
ProjectDataFinalImputed<-ProjectDataImputed%>%mutate(weekdays = case_when(
weekdays == 'Sunday' ~ 'Weekend',
weekdays == 'Saturday' ~ 'Weekend',
TRUE ~ 'Weekday'))
#Check conversion to Weekdays :
head(ProjectDataFinalImputed,3)
DaylyActivityWeekdaysImputedFinal<- aggregate(steps~interval+weekdays, ProjectDataFinalImputed, mean)
head(DaylyActivityWeekdaysImputedFinal,3)
tail(DaylyActivityWeekdaysImputedFinal,3)
g<-ggplot(DaylyActivityWeekdaysImputedFinal, aes(interval, steps, color=weekdays))+ ggtitle("Comparing Weekdays and Weekends activities")
g + geom_line(size=.6)+ labs(x = "Time interval")+labs(y = "Avarage number of steps taken") +theme(axis.text=element_text(color="black",size=13))+theme(axis.title.x=element_text(color='blue',vjust=1.5), axis.title.y=element_text(color="blue",vjust=1.5))
#plot(plotname)
library(lattice)
with(DaylyActivityWeekdaysImputedFinal, xyplot(steps ~ interval | weekdays, type="l", xlab = "Time interval", ylab = "Avarage number of steps taken", layout = c(1, 2)))
